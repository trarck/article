1. 查看FAT信息
	
otool -f dgame1.10.3 
	
	Fat headers
	fat_magic 0xcafebabe
	nfat_arch 2
	architecture 0
	    cputype 12
	    cpusubtype 9			//arm7
	    capabilities 0x0
	    offset 16384
	    size 8458960
	    align 2^14 (16384)
	architecture 1
	    cputype 12
	    cpusubtype 11			//arm7s
	    capabilities 0x0
	    offset 8486912
	    size 8475408
	    align 2^14 (16384)
				
2. 把ARMv7代码提取出来
				
lipo -thin armv7 dgame1.10.3 -output dgame1.10.3.armv7
				
3. 查看这部分代码的加密信息
otool -l dgame1.10.3.armv7 | grep CRYPT -A 4
	      
		  cmd LC_ENCRYPTION_INFO
	      cmdsize 20
	      cryptoff  16384    //0x4000
	      cryptsize 4702208  //0x47C000
	      cryptid   1
   							 
4. 定位入口点
otool -l dgame1.10.3 | grep __TEXT -A 3 -B 1 | head -12					  
						  
	  cmdsize 736
	  segname __TEXT
	   vmaddr 0x00004000
	   vmsize 0x00480000
	  fileoff 0
	--
	--
	  sectname __text
	   segname __TEXT
	      addr 0x00009040  //0x9040==0x4000+0x5040
	      size 0x003a59f4
	    offset 20544   //0x5040
									   
5.使用gdb得到程序偏移
注意这里和网上的不一样，由于是attack的，要找到偏移。程序在编译时启用了PIE(Position Independent Executables)，该安全机制是从ios4.3开始引进的，和Windows下的ASLR类似。									   
dgb
attack dgame.*  //使用tab会提示*的内容									

查看基地址
info sh
	   The DYLD shared library state has not yet been initialized.
	                                              Requested State Current State
	   Num Basename                 Type Address         Reason | | Source     
	     | |                           | |                    | | | |          
	     1 dgame                       - 0x1a000           exec C C /private/var/mobile/Applications/B5312A8D-D226-4566-A439-E8E7BB8B81FC/dgame.app/dgame at 0x1a000 (offset 0x16000)		

得到的是0x16000(offset的值)								

6. 将解密的数据dump下来
加密内容的地址=加载偏移+vmaddr+cryptoff
加密内容的地址结束位置=加密内容的地址+cryptsize																					   
dump memory dgame1.10.3.bin 0x16000+0x4000+0x4000 0x16000+0x4000+0x4000+0x47C000												   

7.拼凑解密文件
cp dgame1.10.3.armv7 dgame1.10.3.armv7.bak																					   
dd bs=1 conv=notrunc if=dgame1.10.3.bin of=dgame1.10.3.armv7 skip=0 seek=16384 count=4702208																						   
注意：这里使用的是thin包，seek直接使用加密偏移。如果是原包要注意包的偏移																						   
																						   																						   
8. 修改加密标志位    																						   
搜索十六进制的2100000014000000。得到偏移2664(21的位置)，加上16得到2680把该位置的01改为00	
																						   																					   